package org.usfirst.frc.team2175.subsystem.visionprocessing;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

import edu.wpi.first.wpilibj.vision.VisionPipeline;

/**
 * GripPipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipeline implements VisionPipeline {

    // Outputs
    private Mat hsvThresholdOutput = new Mat();
    private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<>();
    private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<>();
    private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<>();

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * This is the primary method that runs the entire pipeline and updates the
     * outputs.
     */
    @Override
    public void process(final Mat source0) {
        // Step HSV_Threshold0:
        final Mat hsvThresholdInput = source0;
        final double[] hsvThresholdHue =
                { 82.55395683453237, 100.13651877133107 };
        final double[] hsvThresholdSaturation = { 68.79496402877697, 255.0 };
        final double[] hsvThresholdValue = { 201.79856115107913, 255.0 };
        hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation,
                hsvThresholdValue, hsvThresholdOutput);

        // Step Find_Contours0:
        final Mat findContoursInput = hsvThresholdOutput;
        final boolean findContoursExternalOnly = false;
        findContours(findContoursInput, findContoursExternalOnly,
                findContoursOutput);

        // Step Convex_Hulls0:
        final ArrayList<MatOfPoint> convexHullsContours = findContoursOutput;
        convexHulls(convexHullsContours, convexHullsOutput);

        // Step Filter_Contours0:
        final ArrayList<MatOfPoint> filterContoursContours = convexHullsOutput;
        final double filterContoursMinArea = 500.0;
        final double filterContoursMinPerimeter = 0.0;
        final double filterContoursMinWidth = 0.0;
        final double filterContoursMaxWidth = 1000.0;
        final double filterContoursMinHeight = 0.0;
        final double filterContoursMaxHeight = 1000.0;
        final double[] filterContoursSolidity = { 0.0, 100.0 };
        final double filterContoursMaxVertices = 1000000.0;
        final double filterContoursMinVertices = 0.0;
        final double filterContoursMinRatio = 0.0;
        final double filterContoursMaxRatio = 1000.0;
        filterContours(filterContoursContours, filterContoursMinArea,
                filterContoursMinPerimeter, filterContoursMinWidth,
                filterContoursMaxWidth, filterContoursMinHeight,
                filterContoursMaxHeight, filterContoursSolidity,
                filterContoursMaxVertices, filterContoursMinVertices,
                filterContoursMinRatio, filterContoursMaxRatio,
                filterContoursOutput);

    }

    /**
     * This method is a generated getter for the output of a HSV_Threshold.
     * 
     * @return Mat output from HSV_Threshold.
     */
    public Mat hsvThresholdOutput() {
        return hsvThresholdOutput;
    }

    /**
     * This method is a generated getter for the output of a Find_Contours.
     * 
     * @return ArrayList<MatOfPoint> output from Find_Contours.
     */
    public ArrayList<MatOfPoint> findContoursOutput() {
        return findContoursOutput;
    }

    /**
     * This method is a generated getter for the output of a Convex_Hulls.
     * 
     * @return ArrayList<MatOfPoint> output from Convex_Hulls.
     */
    public ArrayList<MatOfPoint> convexHullsOutput() {
        return convexHullsOutput;
    }

    /**
     * This method is a generated getter for the output of a Filter_Contours.
     * 
     * @return ArrayList<MatOfPoint> output from Filter_Contours.
     */
    public ArrayList<MatOfPoint> filterContoursOutput() {
        return filterContoursOutput;
    }

    /**
     * Segment an image based on hue, saturation, and value ranges.
     *
     * @param input
     *            The image on which to perform the HSL threshold.
     * @param hue
     *            The min and max hue
     * @param sat
     *            The min and max saturation
     * @param val
     *            The min and max value
     * @param output
     *            The image in which to store the output.
     */
    private void hsvThreshold(final Mat input, final double[] hue,
            final double[] sat, final double[] val, final Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
        Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
                new Scalar(hue[1], sat[1], val[1]), out);
    }

    /**
     * Sets the values of pixels in a binary image to their distance to the
     * nearest black pixel.
     * 
     * @param input
     *            The image on which to perform the Distance Transform.
     * @param type
     *            The Transform.
     * @param maskSize
     *            the size of the mask.
     * @param output
     *            The image in which to store the output.
     */
    private void findContours(final Mat input, final boolean externalOnly,
            final List<MatOfPoint> contours) {
        final Mat hierarchy = new Mat();
        contours.clear();
        int mode;
        if (externalOnly) {
            mode = Imgproc.RETR_EXTERNAL;
        } else {
            mode = Imgproc.RETR_LIST;
        }
        final int method = Imgproc.CHAIN_APPROX_SIMPLE;
        Imgproc.findContours(input, contours, hierarchy, mode, method);
    }

    /**
     * Compute the convex hulls of contours.
     * 
     * @param inputContours
     *            The contours on which to perform the operation.
     * @param outputContours
     *            The contours where the output will be stored.
     */
    private void convexHulls(final List<MatOfPoint> inputContours,
            final ArrayList<MatOfPoint> outputContours) {
        final MatOfInt hull = new MatOfInt();
        outputContours.clear();
        for (int i = 0; i < inputContours.size(); i++) {
            final MatOfPoint contour = inputContours.get(i);
            final MatOfPoint mopHull = new MatOfPoint();
            Imgproc.convexHull(contour, hull);
            mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
            for (int j = 0; j < hull.size().height; j++) {
                final int index = (int) hull.get(j, 0)[0];
                final double[] point = new double[] { contour.get(index, 0)[0],
                        contour.get(index, 0)[1] };
                mopHull.put(j, 0, point);
            }
            outputContours.add(mopHull);
        }
    }

    /**
     * Filters out contours that do not meet certain criteria.
     * 
     * @param inputContours
     *            is the input list of contours
     * @param output
     *            is the the output list of contours
     * @param minArea
     *            is the minimum area of a contour that will be kept
     * @param minPerimeter
     *            is the minimum perimeter of a contour that will be kept
     * @param minWidth
     *            minimum width of a contour
     * @param maxWidth
     *            maximum width
     * @param minHeight
     *            minimum height
     * @param maxHeight
     *            maximimum height
     * @param Solidity
     *            the minimum and maximum solidity of a contour
     * @param minVertexCount
     *            minimum vertex Count of the contours
     * @param maxVertexCount
     *            maximum vertex Count
     * @param minRatio
     *            minimum ratio of width to height
     * @param maxRatio
     *            maximum ratio of width to height
     */
    private void filterContours(final List<MatOfPoint> inputContours,
            final double minArea, final double minPerimeter,
            final double minWidth, final double maxWidth,
            final double minHeight, final double maxHeight,
            final double[] solidity, final double maxVertexCount,
            final double minVertexCount, final double minRatio,
            final double maxRatio, final List<MatOfPoint> output) {
        final MatOfInt hull = new MatOfInt();
        output.clear();
        // operation
        for (int i = 0; i < inputContours.size(); i++) {
            final MatOfPoint contour = inputContours.get(i);
            final Rect bb = Imgproc.boundingRect(contour);
            if (bb.width < minWidth || bb.width > maxWidth) {
                continue;
            }
            if (bb.height < minHeight || bb.height > maxHeight) {
                continue;
            }
            final double area = Imgproc.contourArea(contour);
            if (area < minArea) {
                continue;
            }
            if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()),
                    true) < minPerimeter) {
                continue;
            }
            Imgproc.convexHull(contour, hull);
            final MatOfPoint mopHull = new MatOfPoint();
            mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
            for (int j = 0; j < hull.size().height; j++) {
                final int index = (int) hull.get(j, 0)[0];
                final double[] point = new double[] { contour.get(index, 0)[0],
                        contour.get(index, 0)[1] };
                mopHull.put(j, 0, point);
            }
            final double solid = 100 * area / Imgproc.contourArea(mopHull);
            if (solid < solidity[0] || solid > solidity[1]) {
                continue;
            }
            if (contour.rows() < minVertexCount
                    || contour.rows() > maxVertexCount) {
                continue;
            }
            final double ratio = bb.width / (double) bb.height;
            if (ratio < minRatio || ratio > maxRatio) {
                continue;
            }
            output.add(contour);
        }
    }

}
